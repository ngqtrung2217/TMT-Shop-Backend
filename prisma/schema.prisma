// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER & AUTH MODELS
// ================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shops         Shop[]
  carts         Cart[]
  orders        Order[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  otpCodes      OTPCode[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model OTPCode {
  id        String   @id @default(uuid())
  email     String
  code      String
  userId    String?
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
  @@map("otp_codes")
}

// ================================
// SHOP MODEL
// ================================

model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  banner      String?
  ownerId     String
  isActive    Boolean  @default(true)
  rating      Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[]

  @@index([ownerId])
  @@map("shops")
}

// ================================
// PRODUCT MODELS
// ================================

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  discount    Float    @default(0)
  stock       Int      @default(0)
  images      String[]
  shopId      String
  categoryId  String?
  isActive    Boolean  @default(true)
  rating      Float    @default(0)
  soldCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shop      Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  category  Category?  @relation(fields: [categoryId], references: [id])
  cartItems CartItem[]
  reviews   Review[]
  orderItems OrderItem[]

  @@index([shopId])
  @@index([categoryId])
  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

// ================================
// CART MODELS
// ================================

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

// ================================
// ORDER MODELS
// ================================

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  userId        String
  shopId        String
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  shippingAddress String
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  shop  Shop        @relation(fields: [shopId], references: [id])
  items OrderItem[]

  @@index([userId])
  @@index([shopId])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// ================================
// REVIEW MODEL
// ================================

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@map("reviews")
}

// ================================
// ENUMS
// ================================

enum UserRole {
  CUSTOMER
  SHOP_OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}
